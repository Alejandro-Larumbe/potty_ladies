// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}


model User {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  firstName      String
  lastName       String
  email          String   @unique
  phone          Int?
  hashedPassword String
  addressStreet1 String?
  addressStreet2 String?
  addressCity    String?
  addressRegion  String?
  addressZip     Int?

  orders         Order[]
}


model Order {
  id             Int      @id @default(autoincrement())
  updatedAt      DateTime @updatedAt
  createdAt      DateTime @default(now())
  userId         Int
  total          Decimal
  dateTime       DateTime @default(now())
  promoCodeId    Int?
  addressStreet1 String
  addressStreet2 String?
  addressCity    String
  addressRegion  String
  addressZip     Int
  // this will be an enum
  status         String

  promoCode      PromoCode?  @relation(fields: [promoCodeId], references: [id])
  user           User        @relation(fields: [userId], references: [id])
  orderItems     OrderItem[]
}


model OrderItem {
  id        Int      @id @default(autoincrement())
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  orderId   Int
  plantId   Int
  quantity  Int

  order     Order    @relation(fields: [orderId], references: [id])
  plant     Plant    @relation(fields: [plantId], references: [id])
}


model PromoCode {
  id             Int      @id @default(autoincrement())
  name           String   @unique
  // could be customized to start later
  startDate      DateTime @default(now())
  expirationDate DateTime
  orders         Order[]
}


model Plant {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  typeId      Int
  description String
  dimensions  String
  price       Decimal
  stock       Int
  potSize     String

  type        PlantType   @relation(fields: [typeId], references: id)
  tags        PlantTag[]
  images      Image[]
  orderItems  OrderItem[]
  // orderItems  OrderItem[]
  // plantTag  PlantTag[]
  // PlantTag    PlantTag[]
}


model PlantType {
  id   Int    @id @default(autoincrement())
  name String @unique

  plants Plant[]
}


model Image {
  id       Int    @id @default(autoincrement())
  plantId  Int
  sequence Int    @default(autoincrement())
  url      String @unique
  plant    Plant  @relation(fields: [plantId], references: [id])
}


model Tag {
  id       Int        @id @default(autoincrement())
  name     String     @unique
  plants   PlantTag[]
  // plantTag PlantTag[]
  // PlantTag PlantTag[]
}


// Would this be better as PlantTag?
model PlantTag {
  id      Int   @id @default(autoincrement())
  plantId Int
  plant   Plant @relation(fields: [plantId], references: [id])
  tagId   Int
  tag     Tag   @relation(fields: [tagId], references: [id])
}


// stretch goal
model Theme {
  id            Int     @id @default(autoincrement())
  headliner1    Int?
  headliner2    Int?
  headliner3    Int?
  coverPicture1 String?
  coverPicture2 String?
  coverPicture3 String?
  coverPicture4 String?
  coverPicture5 String?
  mainText1     String?
  mainText2     String?
  mainText3     String?
}
